* Higher order functions, part one: functions that take functions as arguments.
* Map, reduce and how they work.  (As in functional programming, not distributed computing.)
* Crash course in prototypal inheritance.
* Brief aside on making a shim to allow use of non-standard JS features like map and reduce.
* Break into pairs and write some code:
  * Implement map and reduce from scratch.
  * Reimplement map as a reduce.
* Higher order functions, part two: functions that return functions.
* Compose function example: square and sum an array
* Break into pairs and write some code:
  * Implement a compose that will take any number of functions.
